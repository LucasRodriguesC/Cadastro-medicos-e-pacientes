// <auto-generated />
using System;
using BuiltCode.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BuiltCode.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BuiltCode.Domain.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.HasIndex("Crm", "UfCrm")
                        .IsUnique();

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("BuiltCode.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("MedicoId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("BuiltCode.Domain.Entities.Parceiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Parceiros");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7636833c-a4fb-4a36-ae91-64ca63f2d02d"),
                            ApiKey = "406a17e0-277e-4926-9b62-be63fcee399f",
                            Nome = "ParceiroTeste"
                        });
                });

            modelBuilder.Entity("BuiltCode.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Perfil")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f511c7f1-fb35-4e31-9fc2-a873b8808e10"),
                            Email = "contato@builtcode.com",
                            Nome = "admin",
                            PasswordHash = new byte[] { 157, 165, 83, 0, 64, 102, 112, 63, 131, 95, 52, 110, 51, 251, 202, 140, 14, 206, 149, 10, 136, 165, 113, 25, 7, 77, 22, 178, 198, 46, 130, 106, 151, 147, 203, 223, 83, 245, 171, 158, 32, 167, 212, 58, 146, 204, 120, 139, 208, 10, 157, 17, 65, 231, 82, 65, 160, 203, 191, 28, 181, 78, 39, 130 },
                            PasswordSalt = new byte[] { 243, 4, 230, 56, 171, 197, 91, 24, 79, 140, 252, 65, 252, 201, 168, 179, 246, 200, 92, 171, 4, 15, 168, 96, 193, 180, 117, 218, 234, 247, 80, 242, 254, 91, 123, 59, 124, 162, 10, 93, 3, 180, 246, 253, 61, 138, 214, 31, 5, 153, 148, 213, 98, 39, 143, 11, 121, 131, 212, 159, 252, 17, 240, 165, 58, 93, 16, 108, 220, 209, 202, 213, 47, 35, 41, 139, 122, 44, 233, 239, 92, 93, 150, 153, 248, 133, 230, 69, 37, 145, 90, 93, 254, 169, 50, 12, 244, 192, 61, 122, 13, 24, 231, 164, 2, 173, 249, 58, 80, 40, 65, 193, 249, 147, 89, 254, 87, 125, 30, 66, 243, 47, 211, 241, 220, 159, 131, 166 },
                            Perfil = 0
                        },
                        new
                        {
                            Id = new Guid("f511c7f1-fb35-4e31-9fc2-a873b8808e01"),
                            Email = "atendente@builtcode.com",
                            Nome = "atendente",
                            PasswordHash = new byte[] { 226, 201, 70, 74, 253, 37, 151, 105, 34, 48, 42, 122, 111, 7, 62, 220, 232, 157, 110, 100, 12, 31, 71, 177, 36, 172, 241, 57, 190, 180, 93, 15, 208, 223, 210, 154, 211, 22, 69, 254, 88, 88, 95, 205, 247, 30, 68, 11, 72, 212, 76, 235, 63, 239, 48, 8, 117, 163, 82, 202, 223, 136, 40, 54 },
                            PasswordSalt = new byte[] { 65, 141, 146, 140, 45, 169, 213, 171, 232, 52, 145, 208, 104, 203, 147, 56, 215, 109, 109, 34, 115, 210, 243, 126, 131, 70, 219, 110, 106, 55, 220, 171, 43, 222, 18, 70, 233, 42, 91, 163, 157, 39, 172, 99, 234, 203, 14, 144, 22, 250, 28, 183, 72, 18, 182, 25, 78, 14, 69, 190, 102, 252, 122, 180, 91, 129, 69, 19, 2, 228, 35, 241, 209, 123, 8, 135, 43, 125, 63, 32, 186, 157, 29, 151, 68, 144, 71, 185, 132, 144, 133, 144, 191, 136, 158, 24, 200, 93, 61, 104, 220, 98, 98, 41, 78, 206, 14, 100, 142, 95, 63, 144, 188, 38, 22, 54, 157, 134, 73, 75, 99, 78, 177, 180, 242, 119, 47, 123 },
                            Perfil = 1
                        });
                });

            modelBuilder.Entity("BuiltCode.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("BuiltCode.Domain.Entities.Medico", "Medico")
                        .WithMany("Pacientes")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("BuiltCode.Domain.Entities.Medico", b =>
                {
                    b.Navigation("Pacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
